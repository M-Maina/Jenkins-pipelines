pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Code Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Unit Testing') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    script {
                        def scannerHome = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=Petclinic"
                    }
                }
            }
        }

        stage('Owasp Check') {
            steps {
                script {
                    sh 'mvn org.owasp:dependency-check-maven:check'
                }
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'target/dependency-check-report', reportFiles: 'dependency-check-report.html', reportName: 'OWASP Dependency-Check Report'])
            }
        }

        stage('Build Stage') {
            steps {
                sh 'mvn clean install'
                archiveArtifacts artifacts: '**/target/*.war', allowEmptyArchive: true
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerServer([credentialsId: 'docker-cred', url: 'https://docker.example.com']) {
                        sh 'docker build -t petclinic .'
                        sh 'docker tag petclinic wamah/petclinic25:v1'
                        sh 'docker push wamah/petclinic25:v1'
                    }
                }
            }
        }

        stage('Docker Image Security Scan') {
            steps {
                script {
                    sh "trivy --no-progress --format json --exit-code 1 --severity HIGH,CRITICAL wamah/petclinic25:v1 > trivy-report.json"
                    archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def kubeConfig = readFile('/var/lib/jenkins/.kube/config')
                    withKubeConfig(credentialsId: 'kubeconfig-cred', kubeconfigContent: kubeConfig) {
                        sh 'kubectl apply -f k8s/petclinic-deployment.yaml'
                    }
                }
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                sh 'cp target/petclinic.war /opt/apache-tomcat-9.0.65/webapps/'
            }
        }
    }

    post {
        success {
            emailext subject: 'Petclinic Build Successful',
                body: 'The Petclinic build has succeeded. Deployments are in progress.',
                recipientProviders: [developers()]
        }

        unstable {
            emailext subject: 'Petclinic Build Unstable',
                body: 'The Petclinic build is unstable. Please investigate and resolve.',
                recipientProviders: [developers()]
        }

        failure {
            emailext subject: 'Petclinic Build Failed',
                body: 'The Petclinic build has failed. Please investigate and resolve.',
                recipientProviders: [developers()]
            attachBuildLog: true  // Attach build log for debugging
            emailext to: 'security@example.com', subject: 'Security Scan Findings', body: 'Trivy vulnerabilities report attached.', attachmentsPattern: '**/trivy-report.json'
        }
    }
}
