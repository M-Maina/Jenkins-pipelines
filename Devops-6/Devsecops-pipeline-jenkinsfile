pipeline {
    agent any
    
    tools {
        maven 'M3.9'
        jdk 'jdk17'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage ('increment version') {
            steps {
               script {
                   echo 'incrementing app version...'
                   sh 'mvn build-helper:parse-version versions:set \
                       -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
                       versions:commit'
                
                   def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                   def version = matcher[0][1]
                   env.IMAGE_NAME = "$version-$BUILD_NUMBER"
               }
            }
            
        }
        
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/M-Maina/Ekart.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Unit Test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('SonnarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar'){
                   sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Ekart \
                   -Dsonar.java.binaries=. \
                   -Dsonar.projectKey=Ekart '''
                }
            }
        }
        
        // stage('Owasp Check') {
        //     steps {
        //         dependencyCheck additionalArguments: ' --scan ./ ', odcInstallation: 'DC'
        //             dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //     }
        // }
        
        
        stage('Build') {
            steps {
                sh 'mvn package -DskipTests=true'
            }
        }
        
        stage('Deploy to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'M3.9', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy -DskipTests=true"
                }
            }
        }
        
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building the docker image"
                    withCredentials([usernamePassword(credentialsId: 'Docker-Cred', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                    sh "docker build -t wamah/demo-app:${IMAGE_NAME} -f docker/Dockerfile ."
                    sh "echo $PASS | docker login -u $USER --password-stdin"
                    sh "docker push wamah/demo-app:${IMAGE_NAME}"
                  }
                    
                }
            }
        }
        
        stage('Trivy Scan') {
            steps {
                sh 'trivy image wamah/demo-app:${IMAGE_NAME} > trivy-report.txt'
            }
        }
        
        stage('Kubernetes Deploy') {
            steps {
                echo 'Hello World'
            }
        }
    }
}
